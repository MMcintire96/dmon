// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service-guide.proto

#include "service-guide.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

namespace hostService {
class TransmitPacketDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TransmitPacket> _instance;
} _TransmitPacket_default_instance_;
class TransmitResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TransmitResponse> _instance;
} _TransmitResponse_default_instance_;
}  // namespace hostService
static void InitDefaultsTransmitPacket_service_2dguide_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hostService::_TransmitPacket_default_instance_;
    new (ptr) ::hostService::TransmitPacket();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hostService::TransmitPacket::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TransmitPacket_service_2dguide_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTransmitPacket_service_2dguide_2eproto}, {}};

static void InitDefaultsTransmitResponse_service_2dguide_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hostService::_TransmitResponse_default_instance_;
    new (ptr) ::hostService::TransmitResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hostService::TransmitResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TransmitResponse_service_2dguide_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTransmitResponse_service_2dguide_2eproto}, {}};

void InitDefaults_service_2dguide_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_TransmitPacket_service_2dguide_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TransmitResponse_service_2dguide_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_service_2dguide_2eproto[2];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_service_2dguide_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_service_2dguide_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_service_2dguide_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hostService::TransmitPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hostService::TransmitPacket, memoryused_),
  PROTOBUF_FIELD_OFFSET(::hostService::TransmitPacket, memoryavailable_),
  PROTOBUF_FIELD_OFFSET(::hostService::TransmitPacket, memorytotal_),
  PROTOBUF_FIELD_OFFSET(::hostService::TransmitPacket, cpuusage_),
  PROTOBUF_FIELD_OFFSET(::hostService::TransmitPacket, uptime_),
  PROTOBUF_FIELD_OFFSET(::hostService::TransmitPacket, version_),
  PROTOBUF_FIELD_OFFSET(::hostService::TransmitPacket, ip_),
  PROTOBUF_FIELD_OFFSET(::hostService::TransmitPacket, deviceid_),
  PROTOBUF_FIELD_OFFSET(::hostService::TransmitPacket, inboundbandwith_),
  PROTOBUF_FIELD_OFFSET(::hostService::TransmitPacket, outboundbandwith_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hostService::TransmitResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hostService::TransmitResponse, didinsert_),
  PROTOBUF_FIELD_OFFSET(::hostService::TransmitResponse, frequencyadjustment_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::hostService::TransmitPacket)},
  { 15, -1, sizeof(::hostService::TransmitResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::hostService::_TransmitPacket_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hostService::_TransmitResponse_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_service_2dguide_2eproto = {
  {}, AddDescriptors_service_2dguide_2eproto, "service-guide.proto", schemas,
  file_default_instances, TableStruct_service_2dguide_2eproto::offsets,
  file_level_metadata_service_2dguide_2eproto, 2, file_level_enum_descriptors_service_2dguide_2eproto, file_level_service_descriptors_service_2dguide_2eproto,
};

const char descriptor_table_protodef_service_2dguide_2eproto[] =
  "\n\023service-guide.proto\022\013hostService\"\326\001\n\016T"
  "ransmitPacket\022\022\n\nMemoryUsed\030\001 \001(\003\022\027\n\017Mem"
  "oryAvailable\030\002 \001(\003\022\023\n\013MemoryTotal\030\003 \001(\003\022"
  "\020\n\010CpuUsage\030\004 \001(\001\022\016\n\006UpTime\030\005 \001(\001\022\017\n\007Ver"
  "sion\030\006 \001(\t\022\n\n\002IP\030\007 \001(\t\022\020\n\010DeviceID\030\010 \001(\t"
  "\022\027\n\017InboundBandwith\030\t \001(\003\022\030\n\020OutboundBan"
  "dwith\030\n \001(\003\"B\n\020TransmitResponse\022\021\n\tDidIn"
  "sert\030\001 \001(\010\022\033\n\023FrequencyAdjustment\030\002 \001(\0052"
  "[\n\013HostService\022L\n\010Transmit\022\033.hostService"
  ".TransmitPacket\032\035.hostService.TransmitRe"
  "sponse\"\000(\0010\001b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_service_2dguide_2eproto = {
  false, InitDefaults_service_2dguide_2eproto, 
  descriptor_table_protodef_service_2dguide_2eproto,
  "service-guide.proto", &assign_descriptors_table_service_2dguide_2eproto, 420,
};

void AddDescriptors_service_2dguide_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_service_2dguide_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_service_2dguide_2eproto = []() { AddDescriptors_service_2dguide_2eproto(); return true; }();
namespace hostService {

// ===================================================================

void TransmitPacket::InitAsDefaultInstance() {
}
class TransmitPacket::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransmitPacket::kMemoryUsedFieldNumber;
const int TransmitPacket::kMemoryAvailableFieldNumber;
const int TransmitPacket::kMemoryTotalFieldNumber;
const int TransmitPacket::kCpuUsageFieldNumber;
const int TransmitPacket::kUpTimeFieldNumber;
const int TransmitPacket::kVersionFieldNumber;
const int TransmitPacket::kIPFieldNumber;
const int TransmitPacket::kDeviceIDFieldNumber;
const int TransmitPacket::kInboundBandwithFieldNumber;
const int TransmitPacket::kOutboundBandwithFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransmitPacket::TransmitPacket()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hostService.TransmitPacket)
}
TransmitPacket::TransmitPacket(const TransmitPacket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip().size() > 0) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  deviceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.deviceid().size() > 0) {
    deviceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deviceid_);
  }
  ::memcpy(&memoryused_, &from.memoryused_,
    static_cast<size_t>(reinterpret_cast<char*>(&outboundbandwith_) -
    reinterpret_cast<char*>(&memoryused_)) + sizeof(outboundbandwith_));
  // @@protoc_insertion_point(copy_constructor:hostService.TransmitPacket)
}

void TransmitPacket::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TransmitPacket_service_2dguide_2eproto.base);
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deviceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&memoryused_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&outboundbandwith_) -
      reinterpret_cast<char*>(&memoryused_)) + sizeof(outboundbandwith_));
}

TransmitPacket::~TransmitPacket() {
  // @@protoc_insertion_point(destructor:hostService.TransmitPacket)
  SharedDtor();
}

void TransmitPacket::SharedDtor() {
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deviceid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TransmitPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransmitPacket& TransmitPacket::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TransmitPacket_service_2dguide_2eproto.base);
  return *internal_default_instance();
}


void TransmitPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:hostService.TransmitPacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&memoryused_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&outboundbandwith_) -
      reinterpret_cast<char*>(&memoryused_)) + sizeof(outboundbandwith_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransmitPacket::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TransmitPacket*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 MemoryUsed = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_memoryused(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 MemoryAvailable = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_memoryavailable(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 MemoryTotal = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_memorytotal(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double CpuUsage = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_cpuusage(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double UpTime = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 41) goto handle_unusual;
        msg->set_uptime(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // string Version = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("hostService.TransmitPacket.Version");
        object = msg->mutable_version();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string IP = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("hostService.TransmitPacket.IP");
        object = msg->mutable_ip();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string DeviceID = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("hostService.TransmitPacket.DeviceID");
        object = msg->mutable_deviceid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 InboundBandwith = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_inboundbandwith(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 OutboundBandwith = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_outboundbandwith(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransmitPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hostService.TransmitPacket)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 MemoryUsed = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &memoryused_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 MemoryAvailable = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &memoryavailable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 MemoryTotal = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &memorytotal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double CpuUsage = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cpuusage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double UpTime = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (41 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &uptime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Version = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "hostService.TransmitPacket.Version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string IP = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "hostService.TransmitPacket.IP"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string DeviceID = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->deviceid().data(), static_cast<int>(this->deviceid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "hostService.TransmitPacket.DeviceID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 InboundBandwith = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &inboundbandwith_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 OutboundBandwith = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &outboundbandwith_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hostService.TransmitPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hostService.TransmitPacket)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransmitPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hostService.TransmitPacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 MemoryUsed = 1;
  if (this->memoryused() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->memoryused(), output);
  }

  // int64 MemoryAvailable = 2;
  if (this->memoryavailable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->memoryavailable(), output);
  }

  // int64 MemoryTotal = 3;
  if (this->memorytotal() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->memorytotal(), output);
  }

  // double CpuUsage = 4;
  if (this->cpuusage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->cpuusage(), output);
  }

  // double UpTime = 5;
  if (this->uptime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->uptime(), output);
  }

  // string Version = 6;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hostService.TransmitPacket.Version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->version(), output);
  }

  // string IP = 7;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hostService.TransmitPacket.IP");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->ip(), output);
  }

  // string DeviceID = 8;
  if (this->deviceid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->deviceid().data(), static_cast<int>(this->deviceid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hostService.TransmitPacket.DeviceID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->deviceid(), output);
  }

  // int64 InboundBandwith = 9;
  if (this->inboundbandwith() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->inboundbandwith(), output);
  }

  // int64 OutboundBandwith = 10;
  if (this->outboundbandwith() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->outboundbandwith(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hostService.TransmitPacket)
}

::google::protobuf::uint8* TransmitPacket::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hostService.TransmitPacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 MemoryUsed = 1;
  if (this->memoryused() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->memoryused(), target);
  }

  // int64 MemoryAvailable = 2;
  if (this->memoryavailable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->memoryavailable(), target);
  }

  // int64 MemoryTotal = 3;
  if (this->memorytotal() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->memorytotal(), target);
  }

  // double CpuUsage = 4;
  if (this->cpuusage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->cpuusage(), target);
  }

  // double UpTime = 5;
  if (this->uptime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->uptime(), target);
  }

  // string Version = 6;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hostService.TransmitPacket.Version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->version(), target);
  }

  // string IP = 7;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hostService.TransmitPacket.IP");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->ip(), target);
  }

  // string DeviceID = 8;
  if (this->deviceid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->deviceid().data(), static_cast<int>(this->deviceid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hostService.TransmitPacket.DeviceID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->deviceid(), target);
  }

  // int64 InboundBandwith = 9;
  if (this->inboundbandwith() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->inboundbandwith(), target);
  }

  // int64 OutboundBandwith = 10;
  if (this->outboundbandwith() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->outboundbandwith(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hostService.TransmitPacket)
  return target;
}

size_t TransmitPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hostService.TransmitPacket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Version = 6;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // string IP = 7;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // string DeviceID = 8;
  if (this->deviceid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->deviceid());
  }

  // int64 MemoryUsed = 1;
  if (this->memoryused() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->memoryused());
  }

  // int64 MemoryAvailable = 2;
  if (this->memoryavailable() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->memoryavailable());
  }

  // int64 MemoryTotal = 3;
  if (this->memorytotal() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->memorytotal());
  }

  // double CpuUsage = 4;
  if (this->cpuusage() != 0) {
    total_size += 1 + 8;
  }

  // double UpTime = 5;
  if (this->uptime() != 0) {
    total_size += 1 + 8;
  }

  // int64 InboundBandwith = 9;
  if (this->inboundbandwith() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->inboundbandwith());
  }

  // int64 OutboundBandwith = 10;
  if (this->outboundbandwith() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->outboundbandwith());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransmitPacket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hostService.TransmitPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const TransmitPacket* source =
      ::google::protobuf::DynamicCastToGenerated<TransmitPacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hostService.TransmitPacket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hostService.TransmitPacket)
    MergeFrom(*source);
  }
}

void TransmitPacket::MergeFrom(const TransmitPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hostService.TransmitPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.deviceid().size() > 0) {

    deviceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deviceid_);
  }
  if (from.memoryused() != 0) {
    set_memoryused(from.memoryused());
  }
  if (from.memoryavailable() != 0) {
    set_memoryavailable(from.memoryavailable());
  }
  if (from.memorytotal() != 0) {
    set_memorytotal(from.memorytotal());
  }
  if (from.cpuusage() != 0) {
    set_cpuusage(from.cpuusage());
  }
  if (from.uptime() != 0) {
    set_uptime(from.uptime());
  }
  if (from.inboundbandwith() != 0) {
    set_inboundbandwith(from.inboundbandwith());
  }
  if (from.outboundbandwith() != 0) {
    set_outboundbandwith(from.outboundbandwith());
  }
}

void TransmitPacket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hostService.TransmitPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransmitPacket::CopyFrom(const TransmitPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hostService.TransmitPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransmitPacket::IsInitialized() const {
  return true;
}

void TransmitPacket::Swap(TransmitPacket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransmitPacket::InternalSwap(TransmitPacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  version_.Swap(&other->version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ip_.Swap(&other->ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  deviceid_.Swap(&other->deviceid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(memoryused_, other->memoryused_);
  swap(memoryavailable_, other->memoryavailable_);
  swap(memorytotal_, other->memorytotal_);
  swap(cpuusage_, other->cpuusage_);
  swap(uptime_, other->uptime_);
  swap(inboundbandwith_, other->inboundbandwith_);
  swap(outboundbandwith_, other->outboundbandwith_);
}

::google::protobuf::Metadata TransmitPacket::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_service_2dguide_2eproto);
  return ::file_level_metadata_service_2dguide_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TransmitResponse::InitAsDefaultInstance() {
}
class TransmitResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransmitResponse::kDidInsertFieldNumber;
const int TransmitResponse::kFrequencyAdjustmentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransmitResponse::TransmitResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hostService.TransmitResponse)
}
TransmitResponse::TransmitResponse(const TransmitResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&didinsert_, &from.didinsert_,
    static_cast<size_t>(reinterpret_cast<char*>(&frequencyadjustment_) -
    reinterpret_cast<char*>(&didinsert_)) + sizeof(frequencyadjustment_));
  // @@protoc_insertion_point(copy_constructor:hostService.TransmitResponse)
}

void TransmitResponse::SharedCtor() {
  ::memset(&didinsert_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frequencyadjustment_) -
      reinterpret_cast<char*>(&didinsert_)) + sizeof(frequencyadjustment_));
}

TransmitResponse::~TransmitResponse() {
  // @@protoc_insertion_point(destructor:hostService.TransmitResponse)
  SharedDtor();
}

void TransmitResponse::SharedDtor() {
}

void TransmitResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransmitResponse& TransmitResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TransmitResponse_service_2dguide_2eproto.base);
  return *internal_default_instance();
}


void TransmitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:hostService.TransmitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&didinsert_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frequencyadjustment_) -
      reinterpret_cast<char*>(&didinsert_)) + sizeof(frequencyadjustment_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransmitResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TransmitResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bool DidInsert = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_didinsert(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 FrequencyAdjustment = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_frequencyadjustment(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransmitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hostService.TransmitResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool DidInsert = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &didinsert_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 FrequencyAdjustment = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frequencyadjustment_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hostService.TransmitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hostService.TransmitResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransmitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hostService.TransmitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool DidInsert = 1;
  if (this->didinsert() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->didinsert(), output);
  }

  // int32 FrequencyAdjustment = 2;
  if (this->frequencyadjustment() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->frequencyadjustment(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hostService.TransmitResponse)
}

::google::protobuf::uint8* TransmitResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hostService.TransmitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool DidInsert = 1;
  if (this->didinsert() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->didinsert(), target);
  }

  // int32 FrequencyAdjustment = 2;
  if (this->frequencyadjustment() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->frequencyadjustment(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hostService.TransmitResponse)
  return target;
}

size_t TransmitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hostService.TransmitResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool DidInsert = 1;
  if (this->didinsert() != 0) {
    total_size += 1 + 1;
  }

  // int32 FrequencyAdjustment = 2;
  if (this->frequencyadjustment() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frequencyadjustment());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransmitResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hostService.TransmitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TransmitResponse* source =
      ::google::protobuf::DynamicCastToGenerated<TransmitResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hostService.TransmitResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hostService.TransmitResponse)
    MergeFrom(*source);
  }
}

void TransmitResponse::MergeFrom(const TransmitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hostService.TransmitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.didinsert() != 0) {
    set_didinsert(from.didinsert());
  }
  if (from.frequencyadjustment() != 0) {
    set_frequencyadjustment(from.frequencyadjustment());
  }
}

void TransmitResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hostService.TransmitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransmitResponse::CopyFrom(const TransmitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hostService.TransmitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransmitResponse::IsInitialized() const {
  return true;
}

void TransmitResponse::Swap(TransmitResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransmitResponse::InternalSwap(TransmitResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(didinsert_, other->didinsert_);
  swap(frequencyadjustment_, other->frequencyadjustment_);
}

::google::protobuf::Metadata TransmitResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_service_2dguide_2eproto);
  return ::file_level_metadata_service_2dguide_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace hostService
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::hostService::TransmitPacket* Arena::CreateMaybeMessage< ::hostService::TransmitPacket >(Arena* arena) {
  return Arena::CreateInternal< ::hostService::TransmitPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::hostService::TransmitResponse* Arena::CreateMaybeMessage< ::hostService::TransmitResponse >(Arena* arena) {
  return Arena::CreateInternal< ::hostService::TransmitResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
